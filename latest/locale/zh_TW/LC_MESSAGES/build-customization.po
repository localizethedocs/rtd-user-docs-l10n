# SOME DESCRIPTIVE TITLE.
# Copyright (C) Read the Docs, Inc & contributors
# This file is distributed under the same license as the Read the Docs user documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Read the Docs user documentation latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-19 17:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../build-customization.rst:2
msgid "Build process customization"
msgstr ""

#: ../../../build-customization.rst:4
msgid ""
"Read the Docs has a :doc:`well-defined build process </builds>` that works "
"for many projects. We also allow customization of builds in two ways:"
msgstr ""

#: ../../../build-customization.rst:7
msgid "Customize our standard build process"
msgstr ""

#: ../../../build-customization.rst:8
msgid ""
"Keep using the default commands for MkDocs or Sphinx, but extend or override "
"the ones you need."
msgstr ""

#: ../../../build-customization.rst:11
msgid "Define a build process from scratch"
msgstr ""

#: ../../../build-customization.rst:12
msgid ""
"This option gives you *full control* over your build. Read the Docs supports "
"any tool that generates HTML."
msgstr ""

#: ../../../build-customization.rst:16
msgid "Extend or override the build process"
msgstr ""

#: ../../../build-customization.rst:18
msgid ""
"In the normal build process, the pre-defined jobs ``checkout``, "
"``system_dependencies``,  and ``upload`` are executed. If you define a :ref:"
"`config-file/v2:sphinx` or :ref:`config-file/v2:mkdocs` configuration, the "
"``create_environment``, ``install``, and ``build`` jobs will use the default "
"commands for the selected tool. If no tool configuration is specified, these "
"jobs won't execute anything by default."
msgstr ""

#: ../../../build-customization.rst:23
msgid "The jobs where users can customize our default build process are:"
msgstr ""

#: ../../../build-customization.rst:29
msgid "Step"
msgstr ""

#: ../../../build-customization.rst:30
msgid "Customizable jobs"
msgstr ""

#: ../../../build-customization.rst:31
msgid "Checkout"
msgstr ""

#: ../../../build-customization.rst:32
msgid "``post_checkout``"
msgstr ""

#: ../../../build-customization.rst:33
msgid "System dependencies"
msgstr ""

#: ../../../build-customization.rst:34
msgid "``pre_system_dependencies``, ``post_system_dependencies``"
msgstr ""

#: ../../../build-customization.rst:35
msgid "Create environment"
msgstr ""

#: ../../../build-customization.rst:36
msgid ""
"``pre_create_environment``, ``create_environment``, "
"``post_create_environment``"
msgstr ""

#: ../../../build-customization.rst:37
msgid "Install"
msgstr ""

#: ../../../build-customization.rst:38
msgid "``pre_install``, ``install``, ``post_install``"
msgstr ""

#: ../../../build-customization.rst:39
msgid "Build"
msgstr ""

#: ../../../build-customization.rst:40
msgid "``pre_build``, ``build``, ``post_build``"
msgstr ""

#: ../../../build-customization.rst:41
msgid "Upload"
msgstr ""

#: ../../../build-customization.rst:42
msgid "No customizable jobs currently"
msgstr ""

#: ../../../build-customization.rst:46
msgid ""
"Any other pre-defined jobs (``checkout``, ``system_dependencies``, "
"``upload``) cannot be overridden or skipped."
msgstr ""

#: ../../../build-customization.rst:48
msgid ""
"These jobs are defined using the :doc:`configuration file </config-file/v2>` "
"with the :ref:`config-file/v2:build.jobs` key. This example configuration "
"defines commands to be executed *before* installing and *after* the build "
"has finished, and also overrides the default build command for the "
"``htmlzip`` format, while keeping the default commands for the ``html`` and "
"``pdf`` formats:"
msgstr ""

#: ../../../build-customization.rst:52 ../../../build-customization.rst:138
#: ../../../build-customization.rst:152 ../../../build-customization.rst:186
#: ../../../build-customization.rst:200 ../../../build-customization.rst:239
#: ../../../build-customization.rst:264 ../../../build-customization.rst:284
#: ../../../build-customization.rst:305 ../../../build-customization.rst:329
#: ../../../build-customization.rst:349 ../../../build-customization.rst:369
#: ../../../build-customization.rst:401 ../../../build-customization.rst:425
#: ../../../build-customization.rst:465 ../../../build-customization.rst:496
#: ../../../build-customization.rst:522 ../../../build-customization.rst:554
#: ../../../build-customization.rst:579 ../../../build-customization.rst:601
#: ../../../build-customization.rst:620 ../../../build-customization.rst:641
#: ../../../build-customization.rst:672
msgid ".readthedocs.yaml"
msgstr ""

#: ../../../build-customization.rst:52
msgid ""
"version: 2\n"
"formats: [htmlzip, pdf]\n"
"sphinx:\n"
"   configuration: docs/conf.py\n"
"python:\n"
"   install:\n"
"     - requirements: docs/requirements.txt\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    pre_install:\n"
"      - bash ./scripts/pre_install.sh\n"
"    build:\n"
"      # The default commands for generating the HTML and pdf formats will "
"still run.\n"
"      htmlzip:\n"
"        - echo \"Override default build command for htmlzip format\"\n"
"        - mkdir -p $READTHEDOCS_OUTPUT/htmlzip/\n"
"        - echo \"Hello, world!\" > $READTHEDOCS_OUTPUT/htmlzip/index.zip\n"
"    post_build:\n"
"      - curl -X POST \\\n"
"        -F \"project=${READTHEDOCS_PROJECT}\" \\\n"
"        -F \"version=${READTHEDOCS_VERSION}\" https://example.com/webhooks/"
"readthedocs/"
msgstr ""

#: ../../../build-customization.rst:81
msgid "Features and limitations"
msgstr ""

#: ../../../build-customization.rst:83
msgid ""
"The current working directory is at the root of your project's cloned "
"repository."
msgstr ""

#: ../../../build-customization.rst:84
msgid ""
"Environment variables are expanded for each individual command (see :doc:`/"
"reference/environment-variables`)."
msgstr ""

#: ../../../build-customization.rst:85
msgid ""
"Each command is executed in a new shell process, so modifications done to "
"the shell environment do not persist between commands."
msgstr ""

#: ../../../build-customization.rst:86
msgid ""
"Any command returning non-zero exit code will cause the build to fail "
"immediately (note there is a special exit code to `cancel the build <cancel-"
"build-based-on-a-condition>`_)."
msgstr ""

#: ../../../build-customization.rst:88
msgid ""
"``build.os`` and ``build.tools`` are required when using ``build.jobs``."
msgstr ""

#: ../../../build-customization.rst:89
msgid ""
"If the :ref:`config-file/v2:sphinx` or :ref:`config-file/v2:mkdocs` "
"configuration is defined, the ``create_environment``, ``install``, and "
"``build`` jobs will use the default commands for the selected tool."
msgstr ""

#: ../../../build-customization.rst:91
msgid ""
"If neither of the :ref:`config-file/v2:sphinx` or :ref:`config-file/v2:"
"mkdocs` configurations are defined, the ``create_environment``, ``install``, "
"and ``build`` jobs will default to run nothing, giving you full control over "
"the build process."
msgstr ""

#: ../../../build-customization.rst:96
msgid "Where to put files"
msgstr ""

#: ../../../build-customization.rst:98
msgid ""
"It is your responsibility to generate HTML and other formats of your "
"documentation when overriding the steps from :ref:`config-file/v2:build.jobs."
"build`. The contents of the ``$READTHEDOCS_OUTPUT/<format>/`` directory will "
"be hosted as part of your documentation."
msgstr ""

#: ../../../build-customization.rst:101
msgid ""
"We store the base folder name ``_readthedocs/`` in the environment variable "
"``$READTHEDOCS_OUTPUT`` and encourage that you use this to generate paths."
msgstr ""

#: ../../../build-customization.rst:103
msgid ""
"Supported :ref:`formats <downloadable-documentation:accessing offline "
"formats>` are published if they exist in the following directories:"
msgstr ""

#: ../../../build-customization.rst:105
msgid "``$READTHEDOCS_OUTPUT/html/`` (required)"
msgstr ""

#: ../../../build-customization.rst:106
msgid "``$READTHEDOCS_OUTPUT/htmlzip/``"
msgstr ""

#: ../../../build-customization.rst:107
msgid "``$READTHEDOCS_OUTPUT/pdf/``"
msgstr ""

#: ../../../build-customization.rst:108
msgid "``$READTHEDOCS_OUTPUT/epub/``"
msgstr ""

#: ../../../build-customization.rst:112
msgid ""
"Remember to create the folders before adding content to them. You can ensure "
"that the output folder exists by adding the following command:"
msgstr ""

#: ../../../build-customization.rst:115
msgid "mkdir -p $READTHEDOCS_OUTPUT/html/"
msgstr ""

#: ../../../build-customization.rst:120
msgid "Search support"
msgstr ""

#: ../../../build-customization.rst:122
msgid ""
"Read the Docs will automatically index the content of all your HTML files, "
"respecting the :ref:`search <config-file/v2:search>` option."
msgstr ""

#: ../../../build-customization.rst:125
msgid ""
"You can access the search from the Read the Docs :term:`dashboard`, or by "
"using the :doc:`/server-side-search/api`."
msgstr ""

#: ../../../build-customization.rst:130
msgid ""
"In order for Read the Docs to index your HTML files correctly, they should "
"follow the conventions described at :doc:`rtd-dev:search-integration`."
msgstr ""

#: ../../../build-customization.rst:134
msgid "Alternative syntax"
msgstr ""

#: ../../../build-customization.rst:136
msgid ""
"Alternatively, you can use the :ref:`config-file/v2:build.commands` key to "
"completely override the build process."
msgstr ""

#: ../../../build-customization.rst:138
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  commands:\n"
"    - pip install pelican\n"
"    - pelican --settings docs/pelicanconf.py --output $READTHEDOCS_OUTPUT/"
"html/ docs/"
msgstr ""

#: ../../../build-customization.rst:150
msgid "But we recommend using :ref:`config-file/v2:build.jobs` instead:"
msgstr ""

#: ../../../build-customization.rst:152
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    install:\n"
"      - pip install pelican\n"
"    build:\n"
"      html:\n"
"        - pelican --settings docs/pelicanconf.py --output "
"$READTHEDOCS_OUTPUT/html/ docs/"
msgstr ""

#: ../../../build-customization.rst:167
msgid ""
"``build.jobs`` offers the same functionality as ``build.commands``, but in a "
"more structured way that allows you to define different commands for each "
"format, while also supporting installing system dependencies via ``build."
"apt_packages``."
msgstr ""

#: ../../../build-customization.rst:172
msgid "Examples"
msgstr ""

#: ../../../build-customization.rst:174
msgid ""
"We've included some common examples where using :ref:`config-file/v2:build."
"jobs` will be useful. These examples may require some adaptation for each "
"projects' use case, we recommend you use them as a starting point."
msgstr ""

#: ../../../build-customization.rst:179
msgid "Unshallow git clone"
msgstr ""

#: ../../../build-customization.rst:181
msgid ""
"Read the Docs does not perform a full clone in the ``checkout`` job in order "
"to reduce network data and speed up the build process. Instead, it performs "
"a `shallow clone <https://git-scm.com/docs/shallow>`_ and only fetches the "
"branch or tag that you are building documentation for. Because of this, "
"extensions that depend on the full Git history will fail. To avoid this, "
"it's possible to unshallow the :program:`git clone`:"
msgstr ""

#: ../../../build-customization.rst:186
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-20.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    post_checkout:\n"
"      - git fetch --unshallow || true"
msgstr ""

#: ../../../build-customization.rst:198
msgid ""
"If your build also relies on the contents of other branches, it may also be "
"necessary to re-configure git to fetch these:"
msgstr ""

#: ../../../build-customization.rst:200
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-20.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    post_checkout:\n"
"      - git fetch --unshallow || true\n"
"      - git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*' "
"|| true\n"
"      - git fetch --all --tags || true"
msgstr ""

#: ../../../build-customization.rst:216
msgid "Cancel build based on a condition"
msgstr ""

#: ../../../build-customization.rst:218
msgid ""
"When a command exits with code ``183``, Read the Docs will cancel the build "
"immediately. You can use this approach to cancel builds that you don't want "
"to complete based on some conditional logic."
msgstr ""

#: ../../../build-customization.rst:222
msgid "Why 183 was chosen for the exit code?"
msgstr ""

#: ../../../build-customization.rst:224
msgid ""
"It's the word \"skip\" encoded in ASCII. Then it's taken the 256 modulo of "
"it because `the Unix implementation does this automatically <https://tldp."
"org/LDP/abs/html/exitcodes.html>`_ for exit codes greater than 255."
msgstr ""

#: ../../../build-customization.rst:229
msgid ""
">>> sum(list(\"skip\".encode(\"ascii\")))\n"
"439\n"
">>> 439 % 256\n"
"183"
msgstr ""

#: ../../../build-customization.rst:237
msgid ""
"Here is an example that cancels builds from pull requests when there are no "
"changes to the ``docs/`` folder compared to the ``origin/main`` branch:"
msgstr ""

#: ../../../build-customization.rst:239
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.12\"\n"
"  jobs:\n"
"    post_checkout:\n"
"      # Cancel building pull requests when there aren't changed in the docs "
"directory or YAML file.\n"
"      # You can add any other files or directories that you'd like here as "
"well,\n"
"      # like your docs requirements file, or other files that will change "
"your docs build.\n"
"      #\n"
"      # If there are no changes (git diff exits with 0) we force the command "
"to return with 183.\n"
"      # This is a special exit code on Read the Docs that will cancel the "
"build immediately.\n"
"      - |\n"
"        if [ \"$READTHEDOCS_VERSION_TYPE\" = \"external\" ] && git diff --"
"quiet origin/main -- docs/ .readthedocs.yaml;\n"
"        then\n"
"          exit 183;\n"
"        fi"
msgstr ""

#: ../../../build-customization.rst:262
msgid ""
"This other example shows how to cancel a build if the commit message "
"contains ``skip ci`` on it:"
msgstr ""

#: ../../../build-customization.rst:264
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.12\"\n"
"  jobs:\n"
"    post_checkout:\n"
"      # Use `git log` to check if the latest commit contains \"skip ci\",\n"
"      # in that case exit the command with 183 to cancel the build\n"
"      - (git --no-pager log --pretty=\"tformat:%s -- %b\" -1 | paste -s -d "
"\" \" | grep -viq \"skip ci\") || exit 183"
msgstr ""

#: ../../../build-customization.rst:280
msgid "Generate documentation from annotated sources with Doxygen"
msgstr ""

#: ../../../build-customization.rst:282
msgid ""
"It's possible to run Doxygen as part of the build process to generate "
"documentation from annotated sources:"
msgstr ""

#: ../../../build-customization.rst:284
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-20.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    pre_build:\n"
"    # Note that this HTML won't be automatically uploaded,\n"
"    # unless your documentation build includes it somehow.\n"
"      - doxygen"
msgstr ""

#: ../../../build-customization.rst:300
msgid "Use MkDocs extensions with extra required steps"
msgstr ""

#: ../../../build-customization.rst:302
msgid ""
"There are some MkDocs extensions that require specific commands to be run to "
"generate extra pages before performing the build. For example, `pydoc-"
"markdown <http://niklasrosenstein.github.io/pydoc-markdown/>`_"
msgstr ""

#: ../../../build-customization.rst:305
msgid ""
"version: 2\n"
"mkdocs:\n"
"  configuration: mkdocs.yml\n"
"build:\n"
"  os: \"ubuntu-20.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    pre_build:\n"
"      - pydoc-markdown --build --site-dir \"$READTHEDOCS_OUTPUT/html\""
msgstr ""

#: ../../../build-customization.rst:321
msgid "Avoid having a dirty Git index"
msgstr ""

#: ../../../build-customization.rst:323
msgid ""
"Read the Docs needs to modify some files before performing the build to be "
"able to integrate with some of its features. Because of this reason, it "
"could happen the Git index gets dirty (it will detect modified files). In "
"case this happens and the project is using any kind of extension that "
"generates a version based on Git metadata (like `setuptools_scm <https://"
"github.com/pypa/setuptools_scm/>`_), this could cause an invalid version "
"number to be generated. In that case, the Git index can be updated to ignore "
"the files that Read the Docs has modified."
msgstr ""

#: ../../../build-customization.rst:329
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-20.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    pre_install:\n"
"      - git update-index --assume-unchanged environment.yml docs/conf.py"
msgstr ""

#: ../../../build-customization.rst:343
msgid "Perform a check for broken links"
msgstr ""

#: ../../../build-customization.rst:345
msgid ""
"Sphinx comes with a `linkcheck <https://www.sphinx-doc.org/en/master/usage/"
"builders/index.html#sphinx.builders.linkcheck.CheckExternalLinksBuilder>`_ "
"builder that checks for broken external links included in the project's "
"documentation. This helps ensure that all external links are still valid and "
"readers aren't linked to non-existent pages."
msgstr ""

#: ../../../build-customization.rst:349
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-20.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    pre_build:\n"
"      - python -m sphinx -b linkcheck -D linkcheck_timeout=1 docs/ "
"$READTHEDOCS_OUTPUT/linkcheck"
msgstr ""

#: ../../../build-customization.rst:363
msgid "Support Git LFS (Large File Storage)"
msgstr ""

#: ../../../build-customization.rst:365
msgid ""
"In case the repository contains large files that are tracked with Git LFS, "
"there are some extra steps required to be able to download their content. "
"It's possible to use ``post_checkout`` user-defined job for this."
msgstr ""

#: ../../../build-customization.rst:369
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-20.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    post_checkout:\n"
"      # Download and uncompress the binary\n"
"      # https://git-lfs.github.com/\n"
"      - wget https://github.com/git-lfs/git-lfs/releases/download/v3.1.4/git-"
"lfs-linux-amd64-v3.1.4.tar.gz\n"
"      - tar xvfz git-lfs-linux-amd64-v3.1.4.tar.gz git-lfs\n"
"      # Modify LFS config paths to point where git-lfs binary was "
"downloaded\n"
"      - git config filter.lfs.process \"`pwd`/git-lfs filter-process\"\n"
"      - git config filter.lfs.smudge  \"`pwd`/git-lfs smudge -- %f\"\n"
"      - git config filter.lfs.clean \"`pwd`/git-lfs clean -- %f\"\n"
"      # Make LFS available in current repository\n"
"      - ./git-lfs install\n"
"      # Download content from remote\n"
"      - ./git-lfs fetch\n"
"      # Make local files to have the real content on them\n"
"      - ./git-lfs checkout"
msgstr ""

#: ../../../build-customization.rst:396
msgid "Install Node.js dependencies"
msgstr ""

#: ../../../build-customization.rst:398
msgid ""
"It's possible to install Node.js together with the required dependencies by "
"using :term:`user-defined build jobs`. To setup it, you need to define the "
"version of Node.js to use and install the dependencies by using ``build.jobs."
"post_install``:"
msgstr ""

#: ../../../build-customization.rst:401
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.9\"\n"
"    nodejs: \"16\"\n"
"  jobs:\n"
"    post_install:\n"
"      # Install dependencies defined in your ``package.json``\n"
"      - npm ci\n"
"      # Install any other extra dependencies to build the docs\n"
"      - npm install -g jsdoc"
msgstr ""

#: ../../../build-customization.rst:419
msgid "Install dependencies with Poetry"
msgstr ""

#: ../../../build-customization.rst:421
msgid ""
"Projects managed with `Poetry <https://python-poetry.org/>`__, can use the "
"``post_create_environment`` user-defined job to use Poetry for installing "
"Python dependencies. Take a look at the following example:"
msgstr ""

#: ../../../build-customization.rst:425
msgid ""
"version: 2\n"
"\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    post_install:\n"
"      # Install poetry\n"
"      # https://python-poetry.org/docs/#installing-manually\n"
"      - pip install poetry\n"
"      # Install dependencies with 'docs' dependency group\n"
"      # https://python-poetry.org/docs/managing-dependencies/#dependency-"
"groups\n"
"      # VIRTUAL_ENV needs to be set manually for now.\n"
"      # See https://github.com/readthedocs/readthedocs.org/pull/11152/\n"
"      - VIRTUAL_ENV=$READTHEDOCS_VIRTUALENV_PATH poetry install --with docs\n"
"\n"
"sphinx:\n"
"  configuration: docs/conf.py"
msgstr ""

#: ../../../build-customization.rst:450
msgid "Install dependencies with ``uv``"
msgstr ""

#: ../../../build-customization.rst:452
msgid ""
"Projects managed with `uv <https://github.com/astral-sh/uv/>`__ can install "
"`uv` with asdf, and then rely on it to set up the environment and install "
"the python project and its dependencies. Read the Docs' own build steps "
"expect it by setting the ``UV_PROJECT_ENVIRONMENT`` variable, usually "
"reducing the time taken to install compared to pip."
msgstr ""

#: ../../../build-customization.rst:457
msgid ""
"The following examples assumes a uv project as described in its `projects "
"concept <https://docs.astral.sh/uv/concepts/projects/>`__. As an "
"introduction refer to its `Working on projects guide <https://docs.astral.sh/"
"uv/guides/projects/>`__. The ``docs`` dependency group which should is "
"pulled in during the ``uv sync`` step (if additional extras are required "
"they can be added with the `--extra attribute <https://docs.astral.sh/uv/"
"concepts/projects/sync/#syncing-optional-dependencies>`__)."
msgstr ""

#: ../../../build-customization.rst:463
msgid "If a ``uv.lock`` file exists it is respected."
msgstr ""

#: ../../../build-customization.rst:465
msgid ""
"version: 2\n"
"\n"
"sphinx:\n"
"   configuration: docs/conf.py\n"
"\n"
"build:\n"
"   os: ubuntu-24.04\n"
"   tools:\n"
"      python: \"3.13\"\n"
"   jobs:\n"
"      pre_create_environment:\n"
"         - asdf plugin add uv\n"
"         - asdf install uv latest\n"
"         - asdf global uv latest\n"
"      create_environment:\n"
"         - uv venv \"${READTHEDOCS_VIRTUALENV_PATH}\"\n"
"      install:\n"
"         - UV_PROJECT_ENVIRONMENT=\"${READTHEDOCS_VIRTUALENV_PATH}\" uv sync "
"--frozen --group docs"
msgstr ""

#: ../../../build-customization.rst:488
msgid "Install dependencies from Dependency Groups"
msgstr ""

#: ../../../build-customization.rst:490
msgid ""
"Python `Dependency Groups <https://packaging.python.org/en/latest/"
"specifications/dependency-groups/>`_ are a way of storing lists of "
"dependencies in your ``pyproject.toml``."
msgstr ""

#: ../../../build-customization.rst:493
msgid ""
"``pip`` version 25.1+ as well as many other tools support Dependency Groups. "
"This example uses ``pip`` and installs from a group named ``docs``:"
msgstr ""

#: ../../../build-customization.rst:496
msgid ""
"version: 2\n"
"\n"
"build:\n"
"   os: ubuntu-24.04\n"
"   tools:\n"
"      python: \"3.13\"\n"
"   jobs:\n"
"      install:\n"
"         # Since the install step is overridden, pip is no longer updated "
"automatically.\n"
"         - pip install --upgrade pip\n"
"         - pip install --group 'docs'"
msgstr ""

#: ../../../build-customization.rst:511
msgid ""
"For more information on relevant ``pip`` usage, see the `pip user guide on "
"Dependency Groups <https://pip.pypa.io/en/stable/user_guide/#dependency-"
"groups>`_."
msgstr ""

#: ../../../build-customization.rst:515
msgid "Install dependencies with ``pixi``"
msgstr ""

#: ../../../build-customization.rst:517
msgid ""
"Projects can use `pixi <https://github.com/prefix-dev/pixi/>`__, to install "
"Python dependencies, usually reducing the time taken to install compared to "
"conda or pip. Take a look at the following example:"
msgstr ""

#: ../../../build-customization.rst:522
msgid ""
"version: 2\n"
"\n"
"build:\n"
"   os: ubuntu-24.04\n"
"   tools:\n"
"       python: \"latest\"\n"
"   jobs:\n"
"      create_environment:\n"
"         - asdf plugin add pixi\n"
"         - asdf install pixi latest\n"
"         - asdf global pixi latest\n"
"      install:\n"
"         # assuming you have an environment called \"docs\"\n"
"         - pixi install -e docs\n"
"      build:\n"
"         html:\n"
"            - pixi run -e docs sphinx-build -T -b html docs "
"$READTHEDOCS_OUTPUT/html"
msgstr ""

#: ../../../build-customization.rst:543
msgid ""
"MkDocs projects could use ``NO_COLOR=1 pixi run -e docs mkdocs build --"
"strict --site-dir $READTHEDOCS_OUTPUT/html`` instead."
msgstr ""

#: ../../../build-customization.rst:546
msgid "Update Conda version"
msgstr ""

#: ../../../build-customization.rst:548
msgid ""
"Projects using Conda may need to install the latest available version of "
"Conda. This can be done by using the ``pre_create_environment`` user-defined "
"job to update Conda before creating the environment. Take a look at the "
"following example:"
msgstr ""

#: ../../../build-customization.rst:554
msgid ""
" version: 2\n"
"\n"
" build:\n"
"   os: \"ubuntu-22.04\"\n"
"   tools:\n"
"     python: \"miniconda3-4.7\"\n"
"   jobs:\n"
"     pre_create_environment:\n"
"       - conda update --yes --quiet --name=base --channel=defaults conda\n"
"\n"
"sphinx:\n"
"   configuration: docs/conf.py\n"
"\n"
" conda:\n"
"   environment: environment.yml"
msgstr ""

#: ../../../build-customization.rst:574
msgid "Using Pelican"
msgstr ""

#: ../../../build-customization.rst:576
msgid ""
"`Pelican <https://blog.getpelican.com/>`__ is a well-known static site "
"generator that's commonly used for blogs and landing pages. If you are "
"building your project with Pelican you could use a configuration file "
"similar to the following:"
msgstr ""

#: ../../../build-customization.rst:579
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    python: \"3.10\"\n"
"  jobs:\n"
"    install:\n"
"      - pip install pelican[markdown]\n"
"    build:\n"
"      html:\n"
"        - pelican --settings docs/pelicanconf.py --output "
"$READTHEDOCS_OUTPUT/html/ docs/"
msgstr ""

#: ../../../build-customization.rst:596
msgid "Using Docsify"
msgstr ""

#: ../../../build-customization.rst:598
msgid ""
"`Docsify <https://docsify.js.org/>`__ generates documentation websites on "
"the fly, without the need to build static HTML. These projects can be built "
"using a configuration file like this:"
msgstr ""

#: ../../../build-customization.rst:601
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  jobs:\n"
"    build:\n"
"      html:\n"
"        - mkdir --parents $READTHEDOCS_OUTPUT/html/\n"
"        - cp --recursive docs/* $READTHEDOCS_OUTPUT/html/"
msgstr ""

#: ../../../build-customization.rst:614
msgid "Using Asciidoc"
msgstr ""

#: ../../../build-customization.rst:616
msgid ""
"`Asciidoctor <https://asciidoctor.org/>`__ is a fast processor for "
"converting and generating documentation from AsciiDoc source. The "
"Asciidoctor toolchain includes `Asciidoctor.js <https://docs.asciidoctor.org/"
"asciidoctor.js/latest/>`__ which you can use with custom build commands. "
"Here is an example configuration file:"
msgstr ""

#: ../../../build-customization.rst:620
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  tools:\n"
"    nodejs: \"20\"\n"
"  jobs:\n"
"    install:\n"
"      - npm install -g asciidoctor\n"
"    build:\n"
"      html:\n"
"        - asciidoctor -D $READTHEDOCS_OUTPUT/html index.asciidoc"
msgstr ""

#: ../../../build-customization.rst:636
msgid "Using pydoctor"
msgstr ""

#: ../../../build-customization.rst:638
msgid ""
"`Pydoctor <https://github.com/twisted/pydoctor>`_ is an easy-to-use "
"standalone API documentation tool for Python. Here is an example "
"configuration file:"
msgstr ""

#: ../../../build-customization.rst:641
msgid ""
"version: 2\n"
"build:\n"
"  os: \"ubuntu-22.04\"\n"
"  jobs:\n"
"    install:\n"
"      - pip install pydoctor\n"
"    build:\n"
"      html:\n"
"        - |\n"
"          pydoctor \\\n"
"            --project-version=${READTHEDOCS_GIT_IDENTIFIER} \\\n"
"            --project-url=${READTHEDOCS_GIT_CLONE_URL%*.git} \\\n"
"            --html-viewsource-base=${READTHEDOCS_GIT_CLONE_URL%*.git}/tree/"
"${READTHEDOCS_GIT_COMMIT_HASH} \\\n"
"            --html-base-url=${READTHEDOCS_CANONICAL_URL} \\\n"
"            --html-output $READTHEDOCS_OUTPUT/html/ \\\n"
"            ./src/my_project"
msgstr ""

#: ../../../build-customization.rst:662
msgid "Generate text format with Sphinx"
msgstr ""

#: ../../../build-customization.rst:664
msgid ""
"There might be various reasons why would you want to generate your "
"documentation in `text` format (secondary to `html`). One of such reasons "
"would be generating LLM friendly documentation."
msgstr ""

#: ../../../build-customization.rst:668
msgid ""
"See the following example for how to add generation of additional `text` "
"format to your existing documentation. Deviations from standard build "
"configuration are highlighted/emphasized:"
msgstr ""

#: ../../../build-customization.rst:672
msgid ""
"version: 2\n"
"\n"
"sphinx:\n"
"  configuration: docs/conf.py\n"
"\n"
"python:\n"
"  install:\n"
"  - requirements: docs/requirements.txt\n"
"\n"
"build:\n"
"  os: ubuntu-22.04\n"
"  tools:\n"
"    python: \"3.12\"\n"
"  jobs:\n"
"    post_build:\n"
"      - mkdir -p $READTHEDOCS_OUTPUT/html/\n"
"      - sphinx-build -n -b text docs $READTHEDOCS_OUTPUT/html/"
msgstr ""

#: ../../../build-customization.rst:694
msgid ""
"The generated ``.txt`` files will be placed in the `html` directory, "
"together with ``.html`` files."
msgstr ""
